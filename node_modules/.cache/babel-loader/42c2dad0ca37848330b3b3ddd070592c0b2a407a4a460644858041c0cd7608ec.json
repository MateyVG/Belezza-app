{"ast":null,"code":"import React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function AdminAdminsSection(_ref){let{supabase}=_ref;const[admins,setAdmins]=useState([]);const[loading,setLoading]=useState(true);const[restaurants,setRestaurants]=useState([]);useEffect(()=>{fetchData();},[]);const fetchData=async()=>{try{setLoading(true);// Зареждане на администратори\nconst{data:adminRolesData,error:adminRolesError}=await supabase.from('user_roles').select(`\n          id,\n          user_id,\n          role,\n          restaurant_id,\n          restaurants:restaurant_id (id, name)\n        `).in('role',['super_admin','restaurant_admin']);if(adminRolesError)throw adminRolesError;// Зареждане на потребителски данни за всеки администратор\nconst userIds=adminRolesData.map(admin=>admin.user_id);const{data:usersData,error:usersError}=await supabase.from('users').select('id, email, name, phone').in('id',userIds);if(usersError){// Ако няма таблица users, използваме данните от auth.users\nconsole.log('Грешка при зареждане от users, опитваме от auth.users');// Комбиниране на данните без допълнителна информация\nsetAdmins(adminRolesData.map(admin=>({...admin,email:'Потребител '+admin.user_id.substring(0,8),// Примерен заместител\nname:'',phone:''})));}else{// Комбиниране на данните от двете заявки\nconst combinedData=adminRolesData.map(admin=>{const userData=usersData.find(user=>user.id===admin.user_id)||{};return{...admin,email:userData.email||'',name:userData.name||'',phone:userData.phone||''};});setAdmins(combinedData);}// Зареждане на всички ресторанти\nconst{data:restaurantsData,error:restaurantsError}=await supabase.from('restaurants').select('id, name');if(restaurantsError)throw restaurantsError;setRestaurants(restaurantsData||[]);}catch(error){console.error('Error fetching admin data:',error);}finally{setLoading(false);}};if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"\\u0417\\u0430\\u0440\\u0435\\u0436\\u0434\\u0430\\u043D\\u0435 \\u043D\\u0430 \\u0430\\u0434\\u043C\\u0438\\u043D\\u0438\\u0441\\u0442\\u0440\\u0430\\u0442\\u043E\\u0440\\u0438...\"});}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u0423\\u043F\\u0440\\u0430\\u0432\\u043B\\u0435\\u043D\\u0438\\u0435 \\u043D\\u0430 \\u0430\\u0434\\u043C\\u0438\\u043D\\u0438\\u0441\\u0442\\u0440\\u0430\\u0442\\u043E\\u0440\\u0438\"}),/*#__PURE__*/_jsx(\"div\",{className:\"admin-controls\",children:/*#__PURE__*/_jsx(\"button\",{className:\"admin-add-btn\",children:\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438 \\u0430\\u0434\\u043C\\u0438\\u043D\\u0438\\u0441\\u0442\\u0440\\u0430\\u0442\\u043E\\u0440\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"admin-table-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u0421\\u043F\\u0438\\u0441\\u044A\\u043A \\u0441 \\u0430\\u0434\\u043C\\u0438\\u043D\\u0438\\u0441\\u0442\\u0440\\u0430\\u0442\\u043E\\u0440\\u0438\"}),admins.length===0?/*#__PURE__*/_jsx(\"div\",{className:\"admin-no-data\",children:/*#__PURE__*/_jsx(\"p\",{children:\"\\u041D\\u044F\\u043C\\u0430 \\u043D\\u0430\\u043C\\u0435\\u0440\\u0435\\u043D\\u0438 \\u0430\\u0434\\u043C\\u0438\\u043D\\u0438\\u0441\\u0442\\u0440\\u0430\\u0442\\u043E\\u0440\\u0438.\"})}):/*#__PURE__*/_jsxs(\"table\",{className:\"admin-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"\\u0418\\u043C\\u0435\\u0439\\u043B\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u0418\\u043C\\u0435\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u0422\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u0420\\u043E\\u043B\\u044F\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u0420\\u0435\\u0441\\u0442\\u043E\\u0440\\u0430\\u043D\\u0442\"}),/*#__PURE__*/_jsx(\"th\",{children:\"\\u0414\\u0435\\u0439\\u0441\\u0442\\u0432\\u0438\\u044F\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:admins.map(admin=>{var _admin$restaurants;return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:admin.email}),/*#__PURE__*/_jsx(\"td\",{children:admin.name||'-'}),/*#__PURE__*/_jsx(\"td\",{children:admin.phone||'-'}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"span\",{className:`role-badge ${admin.role}`,children:admin.role==='super_admin'?'Главен администратор':'Ресторантски администратор'})}),/*#__PURE__*/_jsx(\"td\",{children:((_admin$restaurants=admin.restaurants)===null||_admin$restaurants===void 0?void 0:_admin$restaurants.name)||'-'}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"admin-action-btn edit\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-edit\"})}),/*#__PURE__*/_jsx(\"button\",{className:\"admin-action-btn delete\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-trash\"})})]})]},admin.id);})})]})]})]});}export default AdminAdminsSection;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","AdminAdminsSection","_ref","supabase","admins","setAdmins","loading","setLoading","restaurants","setRestaurants","fetchData","data","adminRolesData","error","adminRolesError","from","select","in","userIds","map","admin","user_id","usersData","usersError","console","log","email","substring","name","phone","combinedData","userData","find","user","id","restaurantsData","restaurantsError","children","className","length","_admin$restaurants","role"],"sources":["D:/Belezza/restaurant-chain-app/src/components/AdminAdminsSection.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction AdminAdminsSection({ supabase }) {\r\n  const [admins, setAdmins] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [restaurants, setRestaurants] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Зареждане на администратори\r\n      const { data: adminRolesData, error: adminRolesError } = await supabase\r\n        .from('user_roles')\r\n        .select(`\r\n          id,\r\n          user_id,\r\n          role,\r\n          restaurant_id,\r\n          restaurants:restaurant_id (id, name)\r\n        `)\r\n        .in('role', ['super_admin', 'restaurant_admin']);\r\n      \r\n      if (adminRolesError) throw adminRolesError;\r\n      \r\n      // Зареждане на потребителски данни за всеки администратор\r\n      const userIds = adminRolesData.map(admin => admin.user_id);\r\n      \r\n      const { data: usersData, error: usersError } = await supabase\r\n        .from('users')\r\n        .select('id, email, name, phone')\r\n        .in('id', userIds);\r\n      \r\n      if (usersError) {\r\n        // Ако няма таблица users, използваме данните от auth.users\r\n        console.log('Грешка при зареждане от users, опитваме от auth.users');\r\n        \r\n        // Комбиниране на данните без допълнителна информация\r\n        setAdmins(adminRolesData.map(admin => ({\r\n          ...admin,\r\n          email: 'Потребител ' + admin.user_id.substring(0, 8), // Примерен заместител\r\n          name: '',\r\n          phone: ''\r\n        })));\r\n      } else {\r\n        // Комбиниране на данните от двете заявки\r\n        const combinedData = adminRolesData.map(admin => {\r\n          const userData = usersData.find(user => user.id === admin.user_id) || {};\r\n          return {\r\n            ...admin,\r\n            email: userData.email || '',\r\n            name: userData.name || '',\r\n            phone: userData.phone || ''\r\n          };\r\n        });\r\n        \r\n        setAdmins(combinedData);\r\n      }\r\n      \r\n      // Зареждане на всички ресторанти\r\n      const { data: restaurantsData, error: restaurantsError } = await supabase\r\n        .from('restaurants')\r\n        .select('id, name');\r\n      \r\n      if (restaurantsError) throw restaurantsError;\r\n      \r\n      setRestaurants(restaurantsData || []);\r\n    } catch (error) {\r\n      console.error('Error fetching admin data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Зареждане на администратори...</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Управление на администратори</h1>\r\n      \r\n      <div className=\"admin-controls\">\r\n        <button className=\"admin-add-btn\">\r\n          Добави администратор\r\n        </button>\r\n      </div>\r\n      \r\n      <div className=\"admin-table-container\">\r\n        <h2>Списък с администратори</h2>\r\n        {admins.length === 0 ? (\r\n          <div className=\"admin-no-data\">\r\n            <p>Няма намерени администратори.</p>\r\n          </div>\r\n        ) : (\r\n          <table className=\"admin-table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Имейл</th>\r\n                <th>Име</th>\r\n                <th>Телефон</th>\r\n                <th>Роля</th>\r\n                <th>Ресторант</th>\r\n                <th>Действия</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {admins.map(admin => (\r\n                <tr key={admin.id}>\r\n                  <td>{admin.email}</td>\r\n                  <td>{admin.name || '-'}</td>\r\n                  <td>{admin.phone || '-'}</td>\r\n                  <td>\r\n                    <span className={`role-badge ${admin.role}`}>\r\n                      {admin.role === 'super_admin' ? 'Главен администратор' : 'Ресторантски администратор'}\r\n                    </span>\r\n                  </td>\r\n                  <td>{admin.restaurants?.name || '-'}</td>\r\n                  <td>\r\n                    <button className=\"admin-action-btn edit\">\r\n                      <i className=\"fas fa-edit\"></i>\r\n                    </button>\r\n                    <button className=\"admin-action-btn delete\">\r\n                      <i className=\"fas fa-trash\"></i>\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminAdminsSection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}