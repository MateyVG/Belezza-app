{"ast":null,"code":"var _jsxFileName = \"D:\\\\Belezza\\\\restaurant-chain-app\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { supabase } from '../utils/supabase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Проверяваме дали има сесия при зареждане\n    const checkUser = async () => {\n      try {\n        const {\n          data\n        } = await supabase.auth.getSession();\n        if (data.session) {\n          setUser(data.session.user);\n          await fetchUserRole(data.session.user.id);\n        }\n      } catch (error) {\n        console.error('Error checking auth state:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Слушател за промени в автентикацията\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      setUser((session === null || session === void 0 ? void 0 : session.user) || null);\n      if (session !== null && session !== void 0 && session.user) {\n        await fetchUserRole(session.user.id);\n      } else {\n        setUserRole(null);\n      }\n      setLoading(false);\n    });\n    checkUser();\n\n    // Изчистване на слушателя\n    return () => {\n      authListener === null || authListener === void 0 ? void 0 : authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  // Извличане на потребителската роля\n  const fetchUserRole = async userId => {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_roles').select('*').eq('user_id', userId).single();\n      if (error) throw error;\n      setUserRole(data);\n    } catch (error) {\n      console.error('Error fetching user role:', error);\n      setUserRole(null);\n    }\n  };\n\n  // Функция за изход от системата\n  const signOut = async () => {\n    await supabase.auth.signOut();\n  };\n\n  // Функция за проверка дали потребителят е администратор\n  const isSuperAdmin = () => {\n    return (userRole === null || userRole === void 0 ? void 0 : userRole.role) === 'super_admin';\n  };\n\n  // Функция за проверка дали потребителят е администратор на ресторант\n  const isRestaurantAdmin = () => {\n    return (userRole === null || userRole === void 0 ? void 0 : userRole.role) === 'restaurant_admin';\n  };\n\n  // Функция за проверка дали потребителят има административни права за конкретен ресторант\n  const hasRestaurantAccess = restaurantId => {\n    if (isSuperAdmin()) return true;\n    if (isRestaurantAdmin() && userRole.restaurant_id === restaurantId) return true;\n    return false;\n  };\n  const value = {\n    user,\n    userRole,\n    loading,\n    signOut,\n    isSuperAdmin,\n    isRestaurantAdmin,\n    hasRestaurantAccess\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"q48W6cVkKdV45khIg/0akNYQAtY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","supabase","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","userRole","setUserRole","loading","setLoading","checkUser","data","auth","getSession","session","fetchUserRole","id","error","console","authListener","onAuthStateChange","event","subscription","unsubscribe","userId","from","select","eq","single","signOut","isSuperAdmin","role","isRestaurantAdmin","hasRestaurantAccess","restaurantId","restaurant_id","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Belezza/restaurant-chain-app/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { supabase } from '../utils/supabase';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [userRole, setUserRole] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Проверяваме дали има сесия при зареждане\r\n    const checkUser = async () => {\r\n      try {\r\n        const { data } = await supabase.auth.getSession();\r\n        \r\n        if (data.session) {\r\n          setUser(data.session.user);\r\n          await fetchUserRole(data.session.user.id);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking auth state:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Слушател за промени в автентикацията\r\n    const { data: authListener } = supabase.auth.onAuthStateChange(\r\n      async (event, session) => {\r\n        setUser(session?.user || null);\r\n        \r\n        if (session?.user) {\r\n          await fetchUserRole(session.user.id);\r\n        } else {\r\n          setUserRole(null);\r\n        }\r\n        \r\n        setLoading(false);\r\n      }\r\n    );\r\n\r\n    checkUser();\r\n    \r\n    // Изчистване на слушателя\r\n    return () => {\r\n      authListener?.subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // Извличане на потребителската роля\r\n  const fetchUserRole = async (userId) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_roles')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      \r\n      setUserRole(data);\r\n    } catch (error) {\r\n      console.error('Error fetching user role:', error);\r\n      setUserRole(null);\r\n    }\r\n  };\r\n\r\n  // Функция за изход от системата\r\n  const signOut = async () => {\r\n    await supabase.auth.signOut();\r\n  };\r\n\r\n  // Функция за проверка дали потребителят е администратор\r\n  const isSuperAdmin = () => {\r\n    return userRole?.role === 'super_admin';\r\n  };\r\n\r\n  // Функция за проверка дали потребителят е администратор на ресторант\r\n  const isRestaurantAdmin = () => {\r\n    return userRole?.role === 'restaurant_admin';\r\n  };\r\n\r\n  // Функция за проверка дали потребителят има административни права за конкретен ресторант\r\n  const hasRestaurantAccess = (restaurantId) => {\r\n    if (isSuperAdmin()) return true;\r\n    if (isRestaurantAdmin() && userRole.restaurant_id === restaurantId) return true;\r\n    return false;\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    userRole,\r\n    loading,\r\n    signOut,\r\n    isSuperAdmin,\r\n    isRestaurantAdmin,\r\n    hasRestaurantAccess\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}