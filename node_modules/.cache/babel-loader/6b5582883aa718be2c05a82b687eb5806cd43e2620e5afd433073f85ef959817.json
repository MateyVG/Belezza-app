{"ast":null,"code":"var _jsxFileName = \"D:\\\\Belezza\\\\restaurant-chain-app\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst supabaseUrl = 'https://lnquyopfvuikhjbjsiqk.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxucXV5b3BmdnVpa2hqYmpzaXFrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU0ODA5MDEsImV4cCI6MjA2MTA1NjkwMX0.GmZ-5FzZkJyMorLGggF_Jegx2Atn0wRiNKCx4esecJw';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [userRole, setUserRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authError, setAuthError] = useState(null);\n  useEffect(() => {\n    // Добавяме лог за дебъгване\n    console.log(\"AuthContext useEffect се изпълнява\");\n\n    // Проверяваме дали има сесия при зареждане\n    const checkUser = async () => {\n      try {\n        console.log(\"Проверка за съществуваща сесия\");\n        const {\n          data,\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          console.error(\"Грешка при проверка на сесия:\", error);\n          setAuthError(error.message);\n          setLoading(false);\n          return;\n        }\n        console.log(\"Получени данни за сесия:\", data);\n        if (data.session) {\n          setUser(data.session.user);\n          try {\n            await fetchUserRole(data.session.user.id);\n          } catch (roleError) {\n            console.error(\"Грешка при извличане на роля:\", roleError);\n            // Продължаваме с потребителя дори без роля\n          }\n        }\n      } catch (error) {\n        console.error('Грешка при проверка на автентикация:', error);\n        setAuthError(error.message);\n      } finally {\n        console.log(\"Зареждането приключи\");\n        setLoading(false);\n      }\n    };\n\n    // Слушател за промени в автентикацията\n    const setupAuthListener = () => {\n      console.log(\"Настройка на слушател за автентикация\");\n      const {\n        data\n      } = supabase.auth.onAuthStateChange(async (event, session) => {\n        var _session$user;\n        console.log(\"Промяна в автентикацията:\", event, session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : _session$user.id);\n        setUser((session === null || session === void 0 ? void 0 : session.user) || null);\n        if (session !== null && session !== void 0 && session.user) {\n          try {\n            await fetchUserRole(session.user.id);\n          } catch (error) {\n            console.error(\"Грешка при извличане на роля след промяна:\", error);\n            // Продължаваме без роля\n          }\n        } else {\n          setUserRole(null);\n        }\n        setLoading(false);\n      });\n      return data;\n    };\n    checkUser();\n    const authListener = setupAuthListener();\n\n    // Изчистване на слушателя\n    return () => {\n      var _authListener$subscri;\n      console.log(\"Почистване на AuthContext\");\n      (authListener === null || authListener === void 0 ? void 0 : (_authListener$subscri = authListener.subscription) === null || _authListener$subscri === void 0 ? void 0 : _authListener$subscri.unsubscribe) && authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  // Извличане на потребителската роля\n  const fetchUserRole = async userId => {\n    console.log(\"Извличане на роля прескочено\");\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('user_roles').select('*').eq('user_id', userId).single();\n      if (error) {\n        // Ако грешката е, че няма намерен запис, просто връщаме null\n        if (error.code === 'PGRST116') {\n          console.log(\"Не е намерена роля за потребителя\");\n          setUserRole(null);\n          return;\n        }\n        throw error;\n      }\n      console.log(\"Намерена роля:\", data);\n      setUserRole(data);\n    } catch (error) {\n      console.error('Грешка при извличане на потребителска роля:', error);\n      setUserRole(null);\n      throw error;\n    }\n  };\n\n  // Функция за изход от системата\n  const signOut = async () => {\n    console.log(\"Излизане от системата\");\n    try {\n      const {\n        error\n      } = await supabase.auth.signOut();\n      if (error) throw error;\n      setUser(null);\n      setUserRole(null);\n    } catch (error) {\n      console.error(\"Грешка при излизане:\", error);\n    }\n  };\n\n  // Функция за проверка дали потребителят е администратор\n  const isSuperAdmin = () => {\n    return (userRole === null || userRole === void 0 ? void 0 : userRole.role) === 'super_admin';\n  };\n\n  // Функция за проверка дали потребителят е администратор на ресторант\n  const isRestaurantAdmin = () => {\n    return (userRole === null || userRole === void 0 ? void 0 : userRole.role) === 'restaurant_admin';\n  };\n\n  // Функция за проверка дали потребителят има административни права за конкретен ресторант\n  const hasRestaurantAccess = restaurantId => {\n    if (isSuperAdmin()) return true;\n    if (isRestaurantAdmin() && userRole.restaurant_id === restaurantId) return true;\n    return false;\n  };\n  const value = {\n    user,\n    userRole,\n    loading,\n    authError,\n    signOut,\n    isSuperAdmin,\n    isRestaurantAdmin,\n    hasRestaurantAccess\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"G8rQVdKhXy5otKjE7aIMbuZoNCs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","createClient","jsxDEV","_jsxDEV","supabaseUrl","supabaseKey","supabase","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","userRole","setUserRole","loading","setLoading","authError","setAuthError","console","log","checkUser","data","error","auth","getSession","message","session","fetchUserRole","id","roleError","setupAuthListener","onAuthStateChange","event","_session$user","authListener","_authListener$subscri","subscription","unsubscribe","userId","from","select","eq","single","code","signOut","isSuperAdmin","role","isRestaurantAdmin","hasRestaurantAccess","restaurantId","restaurant_id","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Belezza/restaurant-chain-app/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = 'https://lnquyopfvuikhjbjsiqk.supabase.co';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxucXV5b3BmdnVpa2hqYmpzaXFrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU0ODA5MDEsImV4cCI6MjA2MTA1NjkwMX0.GmZ-5FzZkJyMorLGggF_Jegx2Atn0wRiNKCx4esecJw';\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [userRole, setUserRole] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [authError, setAuthError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Добавяме лог за дебъгване\r\n    console.log(\"AuthContext useEffect се изпълнява\");\r\n    \r\n    // Проверяваме дали има сесия при зареждане\r\n    const checkUser = async () => {\r\n      try {\r\n        console.log(\"Проверка за съществуваща сесия\");\r\n        const { data, error } = await supabase.auth.getSession();\r\n        \r\n        if (error) {\r\n          console.error(\"Грешка при проверка на сесия:\", error);\r\n          setAuthError(error.message);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        \r\n        console.log(\"Получени данни за сесия:\", data);\r\n        \r\n        if (data.session) {\r\n          setUser(data.session.user);\r\n          try {\r\n            await fetchUserRole(data.session.user.id);\r\n          } catch (roleError) {\r\n            console.error(\"Грешка при извличане на роля:\", roleError);\r\n            // Продължаваме с потребителя дори без роля\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Грешка при проверка на автентикация:', error);\r\n        setAuthError(error.message);\r\n      } finally {\r\n        console.log(\"Зареждането приключи\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    // Слушател за промени в автентикацията\r\n    const setupAuthListener = () => {\r\n      console.log(\"Настройка на слушател за автентикация\");\r\n      const { data } = supabase.auth.onAuthStateChange(\r\n        async (event, session) => {\r\n          console.log(\"Промяна в автентикацията:\", event, session?.user?.id);\r\n          setUser(session?.user || null);\r\n          \r\n          if (session?.user) {\r\n            try {\r\n              await fetchUserRole(session.user.id);\r\n            } catch (error) {\r\n              console.error(\"Грешка при извличане на роля след промяна:\", error);\r\n              // Продължаваме без роля\r\n            }\r\n          } else {\r\n            setUserRole(null);\r\n          }\r\n          \r\n          setLoading(false);\r\n        }\r\n      );\r\n      \r\n      return data;\r\n    };\r\n\r\n    checkUser();\r\n    const authListener = setupAuthListener();\r\n    \r\n    // Изчистване на слушателя\r\n    return () => {\r\n      console.log(\"Почистване на AuthContext\");\r\n      authListener?.subscription?.unsubscribe && authListener.subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // Извличане на потребителската роля\r\n  const fetchUserRole = async (userId) => {\r\n    console.log(\"Извличане на роля прескочено\");\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_roles')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .single();\r\n\r\n      if (error) {\r\n        // Ако грешката е, че няма намерен запис, просто връщаме null\r\n        if (error.code === 'PGRST116') {\r\n          console.log(\"Не е намерена роля за потребителя\");\r\n          setUserRole(null);\r\n          return;\r\n        }\r\n        throw error;\r\n      }\r\n      \r\n      console.log(\"Намерена роля:\", data);\r\n      setUserRole(data);\r\n    } catch (error) {\r\n      console.error('Грешка при извличане на потребителска роля:', error);\r\n      setUserRole(null);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Функция за изход от системата\r\n  const signOut = async () => {\r\n    console.log(\"Излизане от системата\");\r\n    try {\r\n      const { error } = await supabase.auth.signOut();\r\n      if (error) throw error;\r\n      setUser(null);\r\n      setUserRole(null);\r\n    } catch (error) {\r\n      console.error(\"Грешка при излизане:\", error);\r\n    }\r\n  };\r\n\r\n  // Функция за проверка дали потребителят е администратор\r\n  const isSuperAdmin = () => {\r\n    return userRole?.role === 'super_admin';\r\n  };\r\n\r\n  // Функция за проверка дали потребителят е администратор на ресторант\r\n  const isRestaurantAdmin = () => {\r\n    return userRole?.role === 'restaurant_admin';\r\n  };\r\n\r\n  // Функция за проверка дали потребителят има административни права за конкретен ресторант\r\n  const hasRestaurantAccess = (restaurantId) => {\r\n    if (isSuperAdmin()) return true;\r\n    if (isRestaurantAdmin() && userRole.restaurant_id === restaurantId) return true;\r\n    return false;\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    userRole,\r\n    loading,\r\n    authError,\r\n    signOut,\r\n    isSuperAdmin,\r\n    isRestaurantAdmin,\r\n    hasRestaurantAccess\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}